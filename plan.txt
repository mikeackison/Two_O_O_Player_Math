Description
Create a 2-Player math game where players take turns to answer simple math 
addition problems. A new math question is generated for each turn by 
picking two numbers between 1 and 20. The player whose turn it is is 
prompted the question and must answer correctly or lose a life.

Details
Both players start with 3 lives. They lose a life if they mis-answer a
question. At the end of every turn, the game should output the new scores
for both players, so players know where they stand.

The game doesn’t end until one of the players loses all their lives.
At this point, the game should announce who won and what the other player’s
score is.

EXAMPLE prompt
===============
Player 1: What does 5 plus 3 equal?
> 9
Player 1: Seriously? No!
P1: 2/3 vs P2: 3/3
---- NEW TURN ----
Player 2: What does 2 plus 5 equal?
> 8
Player 2: YES! You are correct.
P1: 2/3 vs P2 3/3
---- NEW TURN ----
...some time later...
Player 1 wins with a score of 1/3
---- GAME OVER ---
Good bye!
==============

## Task 1: Extract Nouns for Classes
-write down all the nouns that you feel could make for important entities

1. Player class  - or just a general player class defineing a new player?
 Player Lives  - starting at three; decreases for a wrog answer can be part of the Player Class?
 score is remaining lives left
 instance varible should be 
 reducding player life should be done within the class

answer question 
-lives
-reduce lives
-is alive?


3. Questions - be reualble write in a way that we can re-use them generate one question.
generate question
check answer
Game Class can handle turns and score checking what the answer isinstasitate player class if wrong reduce life
at the end of each iteration ask if they have lives, 
-generate question
-check answers? true or false

player and question just return to game class, and 

Game Class
-inti players
-init question

-handle relation, based on turn 
-ask question(question class)
-check answer(quesion class)

if false ask player to reduce life
check if palyers are alive , if either are dead, game over

I/O put in game class => then refactor?





## Task 2: Write their roles
-what is the role for each class?
-write out a brief paragraph describing the role that class will play in your app.

Remember that objects are important for two things:
-State: Storing data describing themselves (variables)
-Behavior: Defining actions that can be performed on them (methods)

What information is relevant to each class?
-what will they need in order to be initialized?
-what public methods will be defined on them?
Furthermore:
-which class will contain the game loop (where each instance of the loop is the other players turn)?
-which class should manage who the current_player is?
-which class(es) will contain user I/O and which will not have any?


====================

Game starts. we have a prompt with a question for a player. 
Questions are a class,with a randomly generated addition questions - we can use rand(1..20)to generate the number between
one and twenty. Questions will alternate between players. 

If the question is answered propely, alternate to next player, and next question. 

Players are a class it will alternate between players for questions

Player input check answer against question; If correct, a point is added to score class,
if not a life is removed from player life, player class.

Lives will be counted per player (instance variable), a wrong answer will decrease a life

What class manages whose turn it is? Does that mean the fi question is correct or not, that is how we manage turns?

quesiton class and player class can be serpate

in main instiatiate one game object and call the method of play 

main knows game, game know player and question.




